
PSI_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000029e  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800150  00800150  00000382  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b39  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fd  00000000  00000000  00000f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b0  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f3  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000328  00000000  00000000  0000213b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002463  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 37       	cpi	r26, 0x71	; 113
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
		/**************************************************************/
	}
}
int main(void)
{
	DDRB = 0x0F;
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB  = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	85 b9       	out	0x05, r24	; 5
	USART_init();
  ae:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_init>
	sei();
  b2:	78 94       	sei
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0xe>

000000b6 <Compare_arrays>:
				
	}
}
bool Compare_arrays(char *a, char *b, size_t count)
{
	for (size_t i = 0; i < count; i++)
  b6:	41 15       	cp	r20, r1
  b8:	51 05       	cpc	r21, r1
  ba:	b1 f0       	breq	.+44     	; 0xe8 <Compare_arrays+0x32>
	if (a[i] != b[i])
  bc:	fc 01       	movw	r30, r24
  be:	30 81       	ld	r19, Z
  c0:	fb 01       	movw	r30, r22
  c2:	20 81       	ld	r18, Z
  c4:	32 13       	cpse	r19, r18
  c6:	12 c0       	rjmp	.+36     	; 0xec <Compare_arrays+0x36>
  c8:	fc 01       	movw	r30, r24
  ca:	31 96       	adiw	r30, 0x01	; 1
  cc:	db 01       	movw	r26, r22
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	48 0f       	add	r20, r24
  d2:	59 1f       	adc	r21, r25
  d4:	04 c0       	rjmp	.+8      	; 0xde <Compare_arrays+0x28>
  d6:	21 91       	ld	r18, Z+
  d8:	9d 91       	ld	r25, X+
  da:	29 13       	cpse	r18, r25
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <Compare_arrays+0x3a>
				
	}
}
bool Compare_arrays(char *a, char *b, size_t count)
{
	for (size_t i = 0; i < count; i++)
  de:	e4 17       	cp	r30, r20
  e0:	f5 07       	cpc	r31, r21
  e2:	c9 f7       	brne	.-14     	; 0xd6 <Compare_arrays+0x20>
	if (a[i] != b[i])
	return false;
	return true;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	08 95       	ret
}
bool Compare_arrays(char *a, char *b, size_t count)
{
	for (size_t i = 0; i < count; i++)
	if (a[i] != b[i])
	return false;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	80 e0       	ldi	r24, 0x00	; 0
	return true;
}
  f2:	08 95       	ret

000000f4 <__vector_18>:
char sw0[8]={"SWITCH 0"};

bool Compare_arrays(char *a, char *b, size_t count);

ISR(USART_RX_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	char c = UDR0;
 116:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	if(c != '\n')
 11a:	9a 30       	cpi	r25, 0x0A	; 10
 11c:	09 f4       	brne	.+2      	; 0x120 <__vector_18+0x2c>
 11e:	6a c0       	rjmp	.+212    	; 0x1f4 <__vector_18+0x100>
	{
		rx_buffer[rx_buffer_len] = c;
 120:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
 124:	e8 2f       	mov	r30, r24
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ef 5a       	subi	r30, 0xAF	; 175
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	90 83       	st	Z, r25
		rx_buffer_len++;
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
 134:	71 c0       	rjmp	.+226    	; 0x218 <__vector_18+0x124>
	}
	if(c == '\n')
	{
		for(unsigned char i = 0;i<rx_buffer_len;i++)
		{
			str[i] = rx_buffer[i];
 136:	81 91       	ld	r24, Z+
 138:	8d 93       	st	X+, r24
		rx_buffer[rx_buffer_len] = c;
		rx_buffer_len++;
	}
	if(c == '\n')
	{
		for(unsigned char i = 0;i<rx_buffer_len;i++)
 13a:	e2 17       	cp	r30, r18
 13c:	f3 07       	cpc	r31, r19
 13e:	d9 f7       	brne	.-10     	; 0x136 <__vector_18+0x42>
 140:	66 c0       	rjmp	.+204    	; 0x20e <__vector_18+0x11a>
		{
			str[i] = rx_buffer[i];
		}
		for(unsigned char i = 0;i<16;i++)
		{
			rx_buffer[i] = 0;
 142:	11 92       	st	Z+, r1
	{
		for(unsigned char i = 0;i<rx_buffer_len;i++)
		{
			str[i] = rx_buffer[i];
		}
		for(unsigned char i = 0;i<16;i++)
 144:	e8 17       	cp	r30, r24
 146:	f9 07       	cpc	r31, r25
 148:	e1 f7       	brne	.-8      	; 0x142 <__vector_18+0x4e>
		{
			rx_buffer[i] = 0;
		}
		rx_buffer_len = 0;
 14a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
		/**************************************************************/
		if (Compare_arrays(str, idn, sizeof(idn)) == true)
 14e:	45 e0       	ldi	r20, 0x05	; 5
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	6c e2       	ldi	r22, 0x2C	; 44
 154:	71 e0       	ldi	r23, 0x01	; 1
 156:	81 e6       	ldi	r24, 0x61	; 97
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 15e:	88 23       	and	r24, r24
 160:	21 f0       	breq	.+8      	; 0x16a <__vector_18+0x76>
		{
			USART_putstring("TRS32,PSI_DC-DC,SN:001,V1.00\r\n");
 162:	81 e3       	ldi	r24, 0x31	; 49
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 31 01 	call	0x262	; 0x262 <USART_putstring>
		}
		/**************************************************************/
		if (Compare_arrays(str, rst, sizeof(rst)) == true)
 16a:	44 e0       	ldi	r20, 0x04	; 4
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	68 e2       	ldi	r22, 0x28	; 40
 170:	71 e0       	ldi	r23, 0x01	; 1
 172:	81 e6       	ldi	r24, 0x61	; 97
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 17a:	88 23       	and	r24, r24
 17c:	29 f0       	breq	.+10     	; 0x188 <__vector_18+0x94>
		{
			PORTB |= 0x0F;
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	8f 60       	ori	r24, 0x0F	; 15
 182:	85 b9       	out	0x05, r24	; 5
			USART_Flush();
 184:	0e 94 40 01 	call	0x280	; 0x280 <USART_Flush>
		}
		/**************************************************************/
		if (Compare_arrays(str, sw1, sizeof(sw1)) == true)
 188:	48 e0       	ldi	r20, 0x08	; 8
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	60 e2       	ldi	r22, 0x20	; 32
 18e:	71 e0       	ldi	r23, 0x01	; 1
 190:	81 e6       	ldi	r24, 0x61	; 97
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 198:	81 11       	cpse	r24, r1
		{
			PORTB &= ~(1<<PORTB0);
 19a:	28 98       	cbi	0x05, 0	; 5
		}
		/**************************************************************/
		if (Compare_arrays(str, sw2, sizeof(sw2)) == true)
 19c:	48 e0       	ldi	r20, 0x08	; 8
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	68 e1       	ldi	r22, 0x18	; 24
 1a2:	71 e0       	ldi	r23, 0x01	; 1
 1a4:	81 e6       	ldi	r24, 0x61	; 97
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 1ac:	81 11       	cpse	r24, r1
		{
			PORTB &= ~(1<<PORTB1);
 1ae:	29 98       	cbi	0x05, 1	; 5
		}
		/**************************************************************/
		if (Compare_arrays(str, sw3, sizeof(sw3)) == true)
 1b0:	48 e0       	ldi	r20, 0x08	; 8
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	60 e1       	ldi	r22, 0x10	; 16
 1b6:	71 e0       	ldi	r23, 0x01	; 1
 1b8:	81 e6       	ldi	r24, 0x61	; 97
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 1c0:	81 11       	cpse	r24, r1
		{
			PORTB &= ~(1<<PORTB2);
 1c2:	2a 98       	cbi	0x05, 2	; 5
		}
		/**************************************************************/
		if (Compare_arrays(str, sw4, sizeof(sw4)) == true)
 1c4:	48 e0       	ldi	r20, 0x08	; 8
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	68 e0       	ldi	r22, 0x08	; 8
 1ca:	71 e0       	ldi	r23, 0x01	; 1
 1cc:	81 e6       	ldi	r24, 0x61	; 97
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 1d4:	81 11       	cpse	r24, r1
		{
			PORTB &= ~(1<<PORTB3);
 1d6:	2b 98       	cbi	0x05, 3	; 5
		}
		/**************************************************************/
		if (Compare_arrays(str, sw0, sizeof(sw0)) == true)
 1d8:	48 e0       	ldi	r20, 0x08	; 8
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	71 e0       	ldi	r23, 0x01	; 1
 1e0:	81 e6       	ldi	r24, 0x61	; 97
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 1e8:	88 23       	and	r24, r24
 1ea:	b1 f0       	breq	.+44     	; 0x218 <__vector_18+0x124>
		{
			PORTB |= 0x0F;
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	8f 60       	ori	r24, 0x0F	; 15
 1f0:	85 b9       	out	0x05, r24	; 5
		}
		/**************************************************************/
	}
}
 1f2:	12 c0       	rjmp	.+36     	; 0x218 <__vector_18+0x124>
		rx_buffer[rx_buffer_len] = c;
		rx_buffer_len++;
	}
	if(c == '\n')
	{
		for(unsigned char i = 0;i<rx_buffer_len;i++)
 1f4:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
 1f8:	22 23       	and	r18, r18
 1fa:	49 f0       	breq	.+18     	; 0x20e <__vector_18+0x11a>
 1fc:	e1 e5       	ldi	r30, 0x51	; 81
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	a1 e6       	ldi	r26, 0x61	; 97
 202:	b1 e0       	ldi	r27, 0x01	; 1
 204:	21 50       	subi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	2e 5a       	subi	r18, 0xAE	; 174
 20a:	3e 4f       	sbci	r19, 0xFE	; 254
 20c:	94 cf       	rjmp	.-216    	; 0x136 <__vector_18+0x42>
 20e:	e1 e5       	ldi	r30, 0x51	; 81
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	81 e6       	ldi	r24, 0x61	; 97
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	95 cf       	rjmp	.-214    	; 0x142 <__vector_18+0x4e>
		{
			PORTB |= 0x0F;
		}
		/**************************************************************/
	}
}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <USART_init>:
/*****************************************************/
unsigned char USART_receive(void)
{	
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;	
}
 23a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 23e:	83 e3       	ldi	r24, 0x33	; 51
 240:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 244:	88 e9       	ldi	r24, 0x98	; 152
 246:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 250:	08 95       	ret

00000252 <USART_send>:
/*****************************************************/
void USART_send( unsigned char dataa)
{	
	while(!(UCSR0A & (1<<UDRE0)));
 252:	e0 ec       	ldi	r30, 0xC0	; 192
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	90 81       	ld	r25, Z
 258:	95 ff       	sbrs	r25, 5
 25a:	fd cf       	rjmp	.-6      	; 0x256 <USART_send+0x4>
	UDR0 = dataa;	
 25c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 260:	08 95       	ret

00000262 <USART_putstring>:
}
/*****************************************************/
void USART_putstring(char* StringPtr)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
 268:	88 81       	ld	r24, Y
 26a:	88 23       	and	r24, r24
 26c:	31 f0       	breq	.+12     	; 0x27a <USART_putstring+0x18>
 26e:	21 96       	adiw	r28, 0x01	; 1
	USART_send(*StringPtr);
 270:	0e 94 29 01 	call	0x252	; 0x252 <USART_send>
	UDR0 = dataa;	
}
/*****************************************************/
void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){
 274:	89 91       	ld	r24, Y+
 276:	81 11       	cpse	r24, r1
 278:	fb cf       	rjmp	.-10     	; 0x270 <USART_putstring+0xe>
	USART_send(*StringPtr);
	StringPtr++;}	
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <USART_Flush>:
/*****************************************************/
void USART_Flush(void)
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;	
 280:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 284:	88 23       	and	r24, r24
 286:	44 f4       	brge	.+16     	; 0x298 <USART_Flush+0x18>
 288:	a6 ec       	ldi	r26, 0xC6	; 198
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	e0 ec       	ldi	r30, 0xC0	; 192
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	8c 91       	ld	r24, X
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	e4 f3       	brlt	.-8      	; 0x290 <USART_Flush+0x10>
 298:	08 95       	ret

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
