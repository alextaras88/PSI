
PSI_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080015c  0080015c  00000386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b31  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d4  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049b  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000328  00000000  00000000  000020cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000023f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 37       	cpi	r26, 0x7D	; 125
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
}


int main(void)
{
	DDRB = 0x0F;
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB  = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	85 b9       	out	0x05, r24	; 5
    USART_init();
  ae:	0e 94 26 01 	call	0x24c	; 0x24c <USART_init>
	sei();
  b2:	78 94       	sei
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0xe>

000000b6 <Compare_arrays>:
		
    }
}
bool Compare_arrays(char *a, char *b, size_t count)
{
	for (size_t i = 0; i < count; i++)
  b6:	41 15       	cp	r20, r1
  b8:	51 05       	cpc	r21, r1
  ba:	b1 f0       	breq	.+44     	; 0xe8 <Compare_arrays+0x32>
	if (a[i] != b[i])
  bc:	fc 01       	movw	r30, r24
  be:	30 81       	ld	r19, Z
  c0:	fb 01       	movw	r30, r22
  c2:	20 81       	ld	r18, Z
  c4:	32 13       	cpse	r19, r18
  c6:	12 c0       	rjmp	.+36     	; 0xec <Compare_arrays+0x36>
  c8:	fc 01       	movw	r30, r24
  ca:	31 96       	adiw	r30, 0x01	; 1
  cc:	db 01       	movw	r26, r22
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	48 0f       	add	r20, r24
  d2:	59 1f       	adc	r21, r25
  d4:	04 c0       	rjmp	.+8      	; 0xde <Compare_arrays+0x28>
  d6:	21 91       	ld	r18, Z+
  d8:	9d 91       	ld	r25, X+
  da:	29 13       	cpse	r18, r25
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <Compare_arrays+0x3a>
		
    }
}
bool Compare_arrays(char *a, char *b, size_t count)
{
	for (size_t i = 0; i < count; i++)
  de:	e4 17       	cp	r30, r20
  e0:	f5 07       	cpc	r31, r21
  e2:	c9 f7       	brne	.-14     	; 0xd6 <Compare_arrays+0x20>
	if (a[i] != b[i])
	return false;
	return true;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	08 95       	ret
}
bool Compare_arrays(char *a, char *b, size_t count)
{
	for (size_t i = 0; i < count; i++)
	if (a[i] != b[i])
	return false;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	80 e0       	ldi	r24, 0x00	; 0
	return true;
}
  f2:	08 95       	ret

000000f4 <__vector_18>:
char sw0[8]={"SWITCH 0"};	

bool Compare_arrays(char *a, char *b, size_t count);

ISR(USART_RX_vect)
{	
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	char c = UDR0;
 116:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	if(c != '\n')
 11a:	9a 30       	cpi	r25, 0x0A	; 10
 11c:	09 f4       	brne	.+2      	; 0x120 <__vector_18+0x2c>
 11e:	73 c0       	rjmp	.+230    	; 0x206 <__vector_18+0x112>
	{
		rx_buffer[rx_buffer_len] = c;
 120:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 124:	e8 2f       	mov	r30, r24
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	e3 5a       	subi	r30, 0xA3	; 163
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	90 83       	st	Z, r25
		rx_buffer_len++;
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
 134:	7a c0       	rjmp	.+244    	; 0x22a <__vector_18+0x136>
	}
	if(c == '\n')
	{
		for(unsigned char i = 0;i<rx_buffer_len;i++)
		{
			str[i] = rx_buffer[i];
 136:	81 91       	ld	r24, Z+
 138:	8d 93       	st	X+, r24
		rx_buffer[rx_buffer_len] = c;
		rx_buffer_len++;
	}
	if(c == '\n')
	{
		for(unsigned char i = 0;i<rx_buffer_len;i++)
 13a:	e2 17       	cp	r30, r18
 13c:	f3 07       	cpc	r31, r19
 13e:	d9 f7       	brne	.-10     	; 0x136 <__vector_18+0x42>
 140:	6f c0       	rjmp	.+222    	; 0x220 <__vector_18+0x12c>
		{
			str[i] = rx_buffer[i];
		}
		for(unsigned char i = 0;i<16;i++)
	    {
			rx_buffer[i] = 0;
 142:	11 92       	st	Z+, r1
	{
		for(unsigned char i = 0;i<rx_buffer_len;i++)
		{
			str[i] = rx_buffer[i];
		}
		for(unsigned char i = 0;i<16;i++)
 144:	e8 17       	cp	r30, r24
 146:	f9 07       	cpc	r31, r25
 148:	e1 f7       	brne	.-8      	; 0x142 <__vector_18+0x4e>
	    {
			rx_buffer[i] = 0;
		}
		rx_buffer_len = 0;
 14a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
		
		if (Compare_arrays(str, idn, 5) == true)
 14e:	45 e0       	ldi	r20, 0x05	; 5
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	68 e2       	ldi	r22, 0x28	; 40
 154:	71 e0       	ldi	r23, 0x01	; 1
 156:	8d e6       	ldi	r24, 0x6D	; 109
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 15e:	88 23       	and	r24, r24
 160:	21 f0       	breq	.+8      	; 0x16a <__vector_18+0x76>
		{
			USART_putstring("TRS32,PSI_DC-DC,SN:001,V1.00\r\n");
 162:	8d e2       	ldi	r24, 0x2D	; 45
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 3a 01 	call	0x274	; 0x274 <USART_putstring>
			
		}
		if (Compare_arrays(str, sw1, 8) == true)
 16a:	48 e0       	ldi	r20, 0x08	; 8
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	60 e2       	ldi	r22, 0x20	; 32
 170:	71 e0       	ldi	r23, 0x01	; 1
 172:	8d e6       	ldi	r24, 0x6D	; 109
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 17a:	88 23       	and	r24, r24
 17c:	29 f0       	breq	.+10     	; 0x188 <__vector_18+0x94>
		{
			PORTB &= ~(1<<PORTB0);
 17e:	28 98       	cbi	0x05, 0	; 5
			USART_putstring("1\r\n");
 180:	8c e4       	ldi	r24, 0x4C	; 76
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 3a 01 	call	0x274	; 0x274 <USART_putstring>
			
		}
		if (Compare_arrays(str, sw2, 8) == true)
 188:	48 e0       	ldi	r20, 0x08	; 8
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	68 e1       	ldi	r22, 0x18	; 24
 18e:	71 e0       	ldi	r23, 0x01	; 1
 190:	8d e6       	ldi	r24, 0x6D	; 109
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 198:	88 23       	and	r24, r24
 19a:	29 f0       	breq	.+10     	; 0x1a6 <__vector_18+0xb2>
		{
			PORTB &= ~(1<<PORTB1);
 19c:	29 98       	cbi	0x05, 1	; 5
			USART_putstring("2\r\n");
 19e:	80 e5       	ldi	r24, 0x50	; 80
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 3a 01 	call	0x274	; 0x274 <USART_putstring>
			
		}
		if (Compare_arrays(str, sw3, 8) == true)
 1a6:	48 e0       	ldi	r20, 0x08	; 8
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	60 e1       	ldi	r22, 0x10	; 16
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	8d e6       	ldi	r24, 0x6D	; 109
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 1b6:	88 23       	and	r24, r24
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <__vector_18+0xd0>
		{
			PORTB &= ~(1<<PORTB2);
 1ba:	2a 98       	cbi	0x05, 2	; 5
			USART_putstring("3\r\n");
 1bc:	84 e5       	ldi	r24, 0x54	; 84
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 3a 01 	call	0x274	; 0x274 <USART_putstring>
			
		}	
		if (Compare_arrays(str, sw4, 8) == true)
 1c4:	48 e0       	ldi	r20, 0x08	; 8
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	68 e0       	ldi	r22, 0x08	; 8
 1ca:	71 e0       	ldi	r23, 0x01	; 1
 1cc:	8d e6       	ldi	r24, 0x6D	; 109
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 1d4:	88 23       	and	r24, r24
 1d6:	29 f0       	breq	.+10     	; 0x1e2 <__vector_18+0xee>
		{
			PORTB &= ~(1<<PORTB3);
 1d8:	2b 98       	cbi	0x05, 3	; 5
			USART_putstring("4\r\n");
 1da:	88 e5       	ldi	r24, 0x58	; 88
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 3a 01 	call	0x274	; 0x274 <USART_putstring>
			
		}
		if (Compare_arrays(str, sw0, 8) == true)
 1e2:	48 e0       	ldi	r20, 0x08	; 8
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	71 e0       	ldi	r23, 0x01	; 1
 1ea:	8d e6       	ldi	r24, 0x6D	; 109
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <Compare_arrays>
 1f2:	88 23       	and	r24, r24
 1f4:	d1 f0       	breq	.+52     	; 0x22a <__vector_18+0x136>
		{
			PORTB |= 0x0F;
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	8f 60       	ori	r24, 0x0F	; 15
 1fa:	85 b9       	out	0x05, r24	; 5
			USART_putstring("0\r\n");
 1fc:	88 e4       	ldi	r24, 0x48	; 72
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 3a 01 	call	0x274	; 0x274 <USART_putstring>
	}
	
	
	
	
}
 204:	12 c0       	rjmp	.+36     	; 0x22a <__vector_18+0x136>
		rx_buffer[rx_buffer_len] = c;
		rx_buffer_len++;
	}
	if(c == '\n')
	{
		for(unsigned char i = 0;i<rx_buffer_len;i++)
 206:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <__data_end>
 20a:	22 23       	and	r18, r18
 20c:	49 f0       	breq	.+18     	; 0x220 <__vector_18+0x12c>
 20e:	ed e5       	ldi	r30, 0x5D	; 93
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	ad e6       	ldi	r26, 0x6D	; 109
 214:	b1 e0       	ldi	r27, 0x01	; 1
 216:	21 50       	subi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	22 5a       	subi	r18, 0xA2	; 162
 21c:	3e 4f       	sbci	r19, 0xFE	; 254
 21e:	8b cf       	rjmp	.-234    	; 0x136 <__vector_18+0x42>
 220:	ed e5       	ldi	r30, 0x5D	; 93
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	8d e6       	ldi	r24, 0x6D	; 109
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	8c cf       	rjmp	.-232    	; 0x142 <__vector_18+0x4e>
	}
	
	
	
	
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <USART_init>:
unsigned char USART_receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
	
}
 24c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 250:	83 e3       	ldi	r24, 0x33	; 51
 252:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 256:	88 e9       	ldi	r24, 0x98	; 152
 258:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 262:	08 95       	ret

00000264 <USART_send>:

void USART_send( unsigned char dataa){
	
	while(!(UCSR0A & (1<<UDRE0)));
 264:	e0 ec       	ldi	r30, 0xC0	; 192
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	90 81       	ld	r25, Z
 26a:	95 ff       	sbrs	r25, 5
 26c:	fd cf       	rjmp	.-6      	; 0x268 <USART_send+0x4>
	UDR0 = dataa;
 26e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 272:	08 95       	ret

00000274 <USART_putstring>:
	
}

void USART_putstring(char* StringPtr){
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 27a:	88 81       	ld	r24, Y
 27c:	88 23       	and	r24, r24
 27e:	31 f0       	breq	.+12     	; 0x28c <USART_putstring+0x18>
 280:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 282:	0e 94 32 01 	call	0x264	; 0x264 <USART_send>
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
 286:	89 91       	ld	r24, Y+
 288:	81 11       	cpse	r24, r1
 28a:	fb cf       	rjmp	.-10     	; 0x282 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
